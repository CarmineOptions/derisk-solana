# docker compose is ment for local development, do not use docker compose in production!
version: '3.9'

services:
  # Postgres database
  db:
    build:
      context: .
      dockerfile: Dockerfile.db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    user: postgres 
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432

  # api - reads from db, serves over http
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: db
      POSTGRES_DB: postgres
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 3001:3000

  # data-fetcher - fetches data and stores them in the database
  data-fetcher:
    build:
      context: .
      dockerfile: Dockerfile.raw-data-fetching
    environment:
      AUTHENTICATED_RPC_URL: https://<rpc_provider>/<api_token>
      RATE_LIMIT: 5
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: db
      POSTGRES_DB: postgres
    depends_on:
      db:
        condition: service_healthy

  fe:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - 8501:8501

  # check locally that the database was initiated correctly
  # this component should not be in production
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  ob-liq-fetcher:
    build:
      dockerfile: ./Dockerfile.ob-liq-fetching
    environment:
      AUTHENTICATED_RPC_URL: ""
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: db
      POSTGRES_DB: postgres
    depends_on:
      db:
        condition: service_healthy

  ts-fetcher:
    build:
      dockerfile: ./Dockerfile.ts-fetcher
    environment:
      AUTHENTICATED_RPC_URL: ""
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: db
      POSTGRES_DB: postgres
    depends_on:
      db:
        condition: service_healthy

  portainer:
    image: portainer/portainer-ce
    ports:
      - "9000:9000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - portainer_data:/data
    restart: always

volumes:
  portainer_data:
